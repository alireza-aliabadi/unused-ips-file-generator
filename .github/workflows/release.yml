name: Release Rust Binaries

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            ext: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
            deb: true
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ""
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cargo-deb
        if: matrix.deb == true
        run: cargo install cargo-deb

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifacts
        shell: bash
        run: |
          BIN_NAME="ip-availablity-checker"
          mkdir dist

          if [ "${{ matrix.deb }}" = "true" ]; then
            cargo deb --target ${{ matrix.target }}
            cp target/${{ matrix.target }}/debian/*.deb dist/
          fi

          cp target/${{ matrix.target }}/release/${BIN_NAME}${{ matrix.ext }} dist/

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            zip -j dist/${BIN_NAME}-${{ matrix.target }}.zip dist/${BIN_NAME}${{ matrix.ext }}
          else
            tar -czvf dist/${BIN_NAME}-${{ matrix.target }}.tar.gz -C dist ${BIN_NAME}${{ matrix.ext }}
          fi

          cd dist
          sha256sum * > SHA256SUMS.txt

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 --decode | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Configure GPG
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf

      - name: Sign artifacts
        run: |
          for f in dist/*; do
            gpg --batch --yes --pinentry-mode loopback \
                --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
                --armor --detach-sign "$f"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/**/*"
          tag: ${{ github.ref_name }}
          allowUpdates: true
          replacesArtifacts: true
          token: ${{ github.token }}

